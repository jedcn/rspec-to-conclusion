#!/usr/bin/env node

function verifyPreConditions() {
  var ok = true;
  if (!which('rspec')) {
    console.log('Ack! I can\'t rspec without `rspec`');
    console.log('Do you see rspec when you type `which rspec`?');
    ok = false;
  }
  return ok;
}

var run = require("../lib/rspec-runner").run;

function runAndSummarize(runNumber, specs) {
  var successes = {},
      failures = {},
      pending = {},
      results = run("rspecToConclusion-" + runNumber, specs, exec, require);

  _.each(results.examples, function(result) {
    var resultKey = result.file_path + ':' + result.line_number;
    if (result.status == 'passed') {
      successes[resultKey] = result;
    } else if (result.status == 'failed') {
      failures[resultKey] = result;
    } else {
      pending[resultKey] = result;
    }
  });
  return {
    successes: successes,
    failures: failures,
    pending: pending
  };
}

function keyForResult(result) {
  return result.file_path + ':' + result.line_number;
}

function runToConclusion() {

  var runResult,
      runNumber = 1,
      maximumRuns = 3,
      successes = {},
      failures = {},
      pending = {},
      keepGoing = true,
      specsToTryNext = [];

  function handleSuccess(result) {
    successes[keyForResult(result)] = result;
    result.successful_on_try = runNumber;
  }

  function handlePending(result) {
    pending[keyForResult(result)] = result;
    result.successful_on_try = null;
  }

  function handleFailure(result) {
    failures[keyForResult(result)] = result;
    specsToTryNext.push(keyForResult(result));
  }

  for(runNumber = 1; keepGoing && runNumber <= maximumRuns; runNumber++) {
    console.log('Run #' + runNumber + '..');
    runResult = runAndSummarize(runNumber, specsToTryNext);
    failures = {};
    specsToTryNext = [];
    _.each(runResult.successes, handleSuccess);
    _.each(runResult.pending, handlePending);
    _.each(runResult.failures, handleFailure);
    if (specsToTryNext.length === 0) {
      keepGoing = false;
    }
  }

  return {
    successes: successes,
    failures: failures,
    pending: pending,
    totalRuns: runNumber - 1
  };
}

function report(result) {

  var table = require('gfm-table'),
      tableRows = [];

  console.log('');
  console.log('');
  tableRows.push(['File Name and Line Number', 'Result', 'Tries']);
  _.mapObject(result.failures, function(failure, fileNameAndLineNumber) {
    tableRows.push([fileNameAndLineNumber, 'FAILED', result.totalRuns]);
  });
  _.mapObject(result.pending, function(pending, fileNameAndLineNumber) {
    tableRows.push([fileNameAndLineNumber, 'PENDING', 0]);
  });
  _.mapObject(result.successes, function(success, fileNameAndLineNumber) {
    tableRows.push([fileNameAndLineNumber, 'PASSED', success.successful_on_try]);
  });
  console.log(table(tableRows));
  console.log('');
  console.log('');
}

require('shelljs/global');
var _ = require('underscore');

if (!verifyPreConditions()) {
  exit(1);
}
var result = runToConclusion();
report(result);
